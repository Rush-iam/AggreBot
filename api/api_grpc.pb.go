// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: api.proto

package api

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NewsfeedConfiguratorClient is the client API for NewsfeedConfigurator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NewsfeedConfiguratorClient interface {
	AddUser(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*UserId, error)
	UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteUser(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*empty.Empty, error)
	AddGroup(ctx context.Context, in *AddGroupRequest, opts ...grpc.CallOption) (*GroupId, error)
	ListUserGroups(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*ListUserGroupsResponse, error)
	UpdateGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteGroup(ctx context.Context, in *GroupId, opts ...grpc.CallOption) (*empty.Empty, error)
	AddSource(ctx context.Context, in *AddSourceRequest, opts ...grpc.CallOption) (*SourceId, error)
	ListGroupSources(ctx context.Context, in *GroupId, opts ...grpc.CallOption) (*ListGroupSourcesResponse, error)
	UpdateSource(ctx context.Context, in *UpdateSourceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteSource(ctx context.Context, in *SourceId, opts ...grpc.CallOption) (*empty.Empty, error)
}

type newsfeedConfiguratorClient struct {
	cc grpc.ClientConnInterface
}

func NewNewsfeedConfiguratorClient(cc grpc.ClientConnInterface) NewsfeedConfiguratorClient {
	return &newsfeedConfiguratorClient{cc}
}

func (c *newsfeedConfiguratorClient) AddUser(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*UserId, error) {
	out := new(UserId)
	err := c.cc.Invoke(ctx, "/api.NewsfeedConfigurator/addUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsfeedConfiguratorClient) UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.NewsfeedConfigurator/updateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsfeedConfiguratorClient) DeleteUser(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.NewsfeedConfigurator/deleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsfeedConfiguratorClient) AddGroup(ctx context.Context, in *AddGroupRequest, opts ...grpc.CallOption) (*GroupId, error) {
	out := new(GroupId)
	err := c.cc.Invoke(ctx, "/api.NewsfeedConfigurator/addGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsfeedConfiguratorClient) ListUserGroups(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*ListUserGroupsResponse, error) {
	out := new(ListUserGroupsResponse)
	err := c.cc.Invoke(ctx, "/api.NewsfeedConfigurator/listUserGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsfeedConfiguratorClient) UpdateGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.NewsfeedConfigurator/updateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsfeedConfiguratorClient) DeleteGroup(ctx context.Context, in *GroupId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.NewsfeedConfigurator/deleteGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsfeedConfiguratorClient) AddSource(ctx context.Context, in *AddSourceRequest, opts ...grpc.CallOption) (*SourceId, error) {
	out := new(SourceId)
	err := c.cc.Invoke(ctx, "/api.NewsfeedConfigurator/addSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsfeedConfiguratorClient) ListGroupSources(ctx context.Context, in *GroupId, opts ...grpc.CallOption) (*ListGroupSourcesResponse, error) {
	out := new(ListGroupSourcesResponse)
	err := c.cc.Invoke(ctx, "/api.NewsfeedConfigurator/listGroupSources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsfeedConfiguratorClient) UpdateSource(ctx context.Context, in *UpdateSourceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.NewsfeedConfigurator/updateSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsfeedConfiguratorClient) DeleteSource(ctx context.Context, in *SourceId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.NewsfeedConfigurator/deleteSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NewsfeedConfiguratorServer is the server API for NewsfeedConfigurator service.
// All implementations must embed UnimplementedNewsfeedConfiguratorServer
// for forward compatibility
type NewsfeedConfiguratorServer interface {
	AddUser(context.Context, *UserId) (*UserId, error)
	UpdateUser(context.Context, *User) (*empty.Empty, error)
	DeleteUser(context.Context, *UserId) (*empty.Empty, error)
	AddGroup(context.Context, *AddGroupRequest) (*GroupId, error)
	ListUserGroups(context.Context, *UserId) (*ListUserGroupsResponse, error)
	UpdateGroup(context.Context, *Group) (*empty.Empty, error)
	DeleteGroup(context.Context, *GroupId) (*empty.Empty, error)
	AddSource(context.Context, *AddSourceRequest) (*SourceId, error)
	ListGroupSources(context.Context, *GroupId) (*ListGroupSourcesResponse, error)
	UpdateSource(context.Context, *UpdateSourceRequest) (*empty.Empty, error)
	DeleteSource(context.Context, *SourceId) (*empty.Empty, error)
	mustEmbedUnimplementedNewsfeedConfiguratorServer()
}

// UnimplementedNewsfeedConfiguratorServer must be embedded to have forward compatible implementations.
type UnimplementedNewsfeedConfiguratorServer struct {
}

func (UnimplementedNewsfeedConfiguratorServer) AddUser(context.Context, *UserId) (*UserId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedNewsfeedConfiguratorServer) UpdateUser(context.Context, *User) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedNewsfeedConfiguratorServer) DeleteUser(context.Context, *UserId) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedNewsfeedConfiguratorServer) AddGroup(context.Context, *AddGroupRequest) (*GroupId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGroup not implemented")
}
func (UnimplementedNewsfeedConfiguratorServer) ListUserGroups(context.Context, *UserId) (*ListUserGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserGroups not implemented")
}
func (UnimplementedNewsfeedConfiguratorServer) UpdateGroup(context.Context, *Group) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroup not implemented")
}
func (UnimplementedNewsfeedConfiguratorServer) DeleteGroup(context.Context, *GroupId) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (UnimplementedNewsfeedConfiguratorServer) AddSource(context.Context, *AddSourceRequest) (*SourceId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSource not implemented")
}
func (UnimplementedNewsfeedConfiguratorServer) ListGroupSources(context.Context, *GroupId) (*ListGroupSourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGroupSources not implemented")
}
func (UnimplementedNewsfeedConfiguratorServer) UpdateSource(context.Context, *UpdateSourceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSource not implemented")
}
func (UnimplementedNewsfeedConfiguratorServer) DeleteSource(context.Context, *SourceId) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSource not implemented")
}
func (UnimplementedNewsfeedConfiguratorServer) mustEmbedUnimplementedNewsfeedConfiguratorServer() {}

// UnsafeNewsfeedConfiguratorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NewsfeedConfiguratorServer will
// result in compilation errors.
type UnsafeNewsfeedConfiguratorServer interface {
	mustEmbedUnimplementedNewsfeedConfiguratorServer()
}

func RegisterNewsfeedConfiguratorServer(s grpc.ServiceRegistrar, srv NewsfeedConfiguratorServer) {
	s.RegisterService(&NewsfeedConfigurator_ServiceDesc, srv)
}

func _NewsfeedConfigurator_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsfeedConfiguratorServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NewsfeedConfigurator/addUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsfeedConfiguratorServer).AddUser(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsfeedConfigurator_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsfeedConfiguratorServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NewsfeedConfigurator/updateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsfeedConfiguratorServer).UpdateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsfeedConfigurator_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsfeedConfiguratorServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NewsfeedConfigurator/deleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsfeedConfiguratorServer).DeleteUser(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsfeedConfigurator_AddGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsfeedConfiguratorServer).AddGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NewsfeedConfigurator/addGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsfeedConfiguratorServer).AddGroup(ctx, req.(*AddGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsfeedConfigurator_ListUserGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsfeedConfiguratorServer).ListUserGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NewsfeedConfigurator/listUserGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsfeedConfiguratorServer).ListUserGroups(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsfeedConfigurator_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsfeedConfiguratorServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NewsfeedConfigurator/updateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsfeedConfiguratorServer).UpdateGroup(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsfeedConfigurator_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsfeedConfiguratorServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NewsfeedConfigurator/deleteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsfeedConfiguratorServer).DeleteGroup(ctx, req.(*GroupId))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsfeedConfigurator_AddSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsfeedConfiguratorServer).AddSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NewsfeedConfigurator/addSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsfeedConfiguratorServer).AddSource(ctx, req.(*AddSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsfeedConfigurator_ListGroupSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsfeedConfiguratorServer).ListGroupSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NewsfeedConfigurator/listGroupSources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsfeedConfiguratorServer).ListGroupSources(ctx, req.(*GroupId))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsfeedConfigurator_UpdateSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsfeedConfiguratorServer).UpdateSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NewsfeedConfigurator/updateSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsfeedConfiguratorServer).UpdateSource(ctx, req.(*UpdateSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsfeedConfigurator_DeleteSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SourceId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsfeedConfiguratorServer).DeleteSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NewsfeedConfigurator/deleteSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsfeedConfiguratorServer).DeleteSource(ctx, req.(*SourceId))
	}
	return interceptor(ctx, in, info, handler)
}

// NewsfeedConfigurator_ServiceDesc is the grpc.ServiceDesc for NewsfeedConfigurator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NewsfeedConfigurator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.NewsfeedConfigurator",
	HandlerType: (*NewsfeedConfiguratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addUser",
			Handler:    _NewsfeedConfigurator_AddUser_Handler,
		},
		{
			MethodName: "updateUser",
			Handler:    _NewsfeedConfigurator_UpdateUser_Handler,
		},
		{
			MethodName: "deleteUser",
			Handler:    _NewsfeedConfigurator_DeleteUser_Handler,
		},
		{
			MethodName: "addGroup",
			Handler:    _NewsfeedConfigurator_AddGroup_Handler,
		},
		{
			MethodName: "listUserGroups",
			Handler:    _NewsfeedConfigurator_ListUserGroups_Handler,
		},
		{
			MethodName: "updateGroup",
			Handler:    _NewsfeedConfigurator_UpdateGroup_Handler,
		},
		{
			MethodName: "deleteGroup",
			Handler:    _NewsfeedConfigurator_DeleteGroup_Handler,
		},
		{
			MethodName: "addSource",
			Handler:    _NewsfeedConfigurator_AddSource_Handler,
		},
		{
			MethodName: "listGroupSources",
			Handler:    _NewsfeedConfigurator_ListGroupSources_Handler,
		},
		{
			MethodName: "updateSource",
			Handler:    _NewsfeedConfigurator_UpdateSource_Handler,
		},
		{
			MethodName: "deleteSource",
			Handler:    _NewsfeedConfigurator_DeleteSource_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
